Есть новая задача, необходимо реализовать интерфейс на странице регистрации пользователя.
Вот исходники:
Element.tsx
import { ArrowLeftIcon } from "lucide-react";
import React, { useState } from "react";
import { Button } from "../../components/ui/button";
import { Checkbox } from "../../components/ui/checkbox";
import { Input } from "../../components/ui/input";
import { Label } from "../../components/ui/label";
import { ToggleGroup, ToggleGroupItem } from "../../components/ui/toggle-group";

export const Element = (): JSX.Element => {
  const [userType, setUserType] = useState("legal");
  const [acceptedTerms, setAcceptedTerms] = useState(false);

  return (
    <div
      className="relative w-full min-h-screen bg-white flex"
      data-model-id="1184:31120"
    >
      {/* Left side - Form */}
      <div className="flex-1 max-w-[647px] p-[60px] pr-[60px]">
        {/* Back button */}
        <div className="translate-y-[-1rem] animate-fade-in opacity-0 [--animation-delay:0ms]">
          <Button
            variant="ghost"
            size="sm"
            className="inline-flex items-center justify-center gap-2.5 p-2 rounded-[13px] h-auto mb-[195px]"
          >
            <ArrowLeftIcon className="w-6 h-6" />
          </Button>
        </div>

        {/* Main form content */}
        <div className="flex flex-col w-full max-w-[587px] items-start gap-[34px]">
          {/* Header section */}
          <div className="translate-y-[-1rem] animate-fade-in opacity-0 [--animation-delay:200ms]">
            <div className="flex flex-col items-start gap-6 w-full">
              <div className="flex flex-col items-start gap-10 w-full">
                {/* Logo and brand */}
                <div className="inline-flex items-center gap-2.5">
                  <div className="w-[22px] h-[22px] bg-[url(https://c.animaapp.com/meqn3clj7n5fcU/img/subtract.svg)] bg-[100%_100%]" />
                  <div className="[font-family:'Roboto',Helvetica] font-normal text-[#1e1e1e] text-[22px] tracking-[0] leading-[22px] whitespace-nowrap">
                    Profdepo
                  </div>
                </div>

                {/* Title */}
                <h1 className="[font-family:'Roboto',Helvetica] font-semibold text-[#1e1e1e] text-4xl tracking-[0] leading-[normal]">
                  Регистрация
                </h1>
              </div>

              {/* User type toggle */}
              <div className="inline-flex items-start p-1 bg-[#d6e1ec] rounded-[13px]">
                <ToggleGroup
                  type="single"
                  value={userType}
                  onValueChange={(value) => value && setUserType(value)}
                  className="gap-0"
                >
                  <ToggleGroupItem
                    value="legal"
                    className="inline-flex items-center justify-center gap-2 px-3.5 py-[9px] bg-white rounded-[11px] data-[state=on]:bg-white data-[state=off]:bg-transparent [font-family:'Roboto',Helvetica] text-[#1e1e1e] text-center leading-[18px] whitespace-nowrap font-medium text-[15px] tracking-[0] data-[state=off]:text-[#7b94b1]"
                  >
                    Для юридических лиц
                  </ToggleGroupItem>
                  <ToggleGroupItem
                    value="individual"
                    className="flex w-[186px] items-center justify-center gap-2 px-3.5 py-[9px] rounded-[11px] data-[state=on]:bg-white data-[state=off]:bg-transparent [font-family:'Roboto',Helvetica] text-[#7b94b1] text-center leading-[18px] whitespace-nowrap font-medium text-[15px] tracking-[0] data-[state=on]:text-[#1e1e1e]"
                  >
                    Для физических лиц
                  </ToggleGroupItem>
                </ToggleGroup>
              </div>
            </div>
          </div>

          {/* Form fields */}
          <div className="translate-y-[-1rem] animate-fade-in opacity-0 [--animation-delay:400ms]">
            <div className="flex flex-col items-start gap-6 w-full">
              <div className="flex flex-col items-start gap-[18px] w-full">
                {/* Company name and INN row */}
                <div className="flex items-start gap-[18px] w-full">
                  <div className="flex flex-col items-start gap-2 flex-1">
                    <Label className="font-profdepo-text-caption-1-medium font-[number:var(--profdepo-text-caption-1-medium-font-weight)] text-[#526176] text-[length:var(--profdepo-text-caption-1-medium-font-size)] tracking-[var(--profdepo-text-caption-1-medium-letter-spacing)] leading-[var(--profdepo-text-caption-1-medium-line-height)] [font-style:var(--profdepo-text-caption-1-medium-font-style)]">
                      Название компании
                    </Label>
                    <Input
                      placeholder="Введите название компании"
                      className="flex items-center gap-2 px-3 py-3.5 w-full rounded-[13px] border border-solid border-[#97aec6] font-profdepo-text-text-9-medium font-[number:var(--profdepo-text-text-9-medium-font-weight)] text-[length:var(--profdepo-text-text-9-medium-font-size)] tracking-[var(--profdepo-text-text-9-medium-letter-spacing)] leading-[var(--profdepo-text-text-9-medium-line-height)] [font-style:var(--profdepo-text-text-9-medium-font-style)] placeholder:text-[#97aec6] h-auto"
                    />
                  </div>

                  <div className="flex flex-col items-start gap-2 flex-1">
                    <Label className="font-profdepo-text-caption-1-medium font-[number:var(--profdepo-text-caption-1-medium-font-weight)] text-[#526176] text-[length:var(--profdepo-text-caption-1-medium-font-size)] tracking-[var(--profdepo-text-caption-1-medium-letter-spacing)] leading-[var(--profdepo-text-caption-1-medium-line-height)] [font-style:var(--profdepo-text-caption-1-medium-font-style)]">
                      ИНН
                    </Label>
                    <Input
                      placeholder="Введите ИНН"
                      className="flex items-center gap-2 pl-3 pr-8 py-3.5 w-full rounded-[13px] border border-solid border-[#97aec6] font-profdepo-text-text-9-medium font-[number:var(--profdepo-text-text-9-medium-font-weight)] text-[length:var(--profdepo-text-text-9-medium-font-size)] tracking-[var(--profdepo-text-text-9-medium-letter-spacing)] leading-[var(--profdepo-text-text-9-medium-line-height)] [font-style:var(--profdepo-text-text-9-medium-font-style)] placeholder:text-[#97aec6] h-auto"
                    />
                  </div>
                </div>

                {/* Email field */}
                <div className="flex flex-col items-start gap-2 w-full">
                  <Label className="font-profdepo-text-caption-1-medium font-[number:var(--profdepo-text-caption-1-medium-font-weight)] text-[#526176] text-[length:var(--profdepo-text-caption-1-medium-font-size)] tracking-[var(--profdepo-text-caption-1-medium-letter-spacing)] leading-[var(--profdepo-text-caption-1-medium-line-height)] [font-style:var(--profdepo-text-caption-1-medium-font-style)]">
                    Почта
                  </Label>
                  <Input
                    placeholder="Введите почту"
                    type="email"
                    className="flex items-center gap-2 pl-3 pr-8 py-3.5 w-full rounded-[13px] border border-solid border-[#97aec6] font-profdepo-text-text-9-medium font-[number:var(--profdepo-text-text-9-medium-font-weight)] text-[length:var(--profdepo-text-text-9-medium-font-size)] tracking-[var(--profdepo-text-text-9-medium-letter-spacing)] leading-[var(--profdepo-text-text-9-medium-line-height)] [font-style:var(--profdepo-text-text-9-medium-font-style)] placeholder:text-[#97aec6] h-auto"
                  />
                </div>

                {/* Phone field */}
                <div className="flex flex-col items-start gap-2 w-full">
                  <Label className="font-profdepo-text-caption-1-medium font-[number:var(--profdepo-text-caption-1-medium-font-weight)] text-[#526176] text-[length:var(--profdepo-text-caption-1-medium-font-size)] tracking-[var(--profdepo-text-caption-1-medium-letter-spacing)] leading-[var(--profdepo-text-caption-1-medium-line-height)] [font-style:var(--profdepo-text-caption-1-medium-font-style)]">
                    Телефон
                  </Label>
                  <Input
                    placeholder="Введите телефон"
                    type="tel"
                    className="flex items-center gap-2 pl-3 pr-8 py-3.5 w-full rounded-[13px] border border-solid border-[#97aec6] font-profdepo-text-text-9-medium font-[number:var(--profdepo-text-text-9-medium-font-weight)] text-[length:var(--profdepo-text-text-9-medium-font-size)] tracking-[var(--profdepo-text-text-9-medium-letter-spacing)] leading-[var(--profdepo-text-text-9-medium-line-height)] [font-style:var(--profdepo-text-text-9-medium-font-style)] placeholder:text-[#97aec6] h-auto"
                  />
                </div>
              </div>

              {/* Privacy policy checkbox */}
              <div className="translate-y-[-1rem] animate-fade-in opacity-0 [--animation-delay:600ms]">
                <div className="flex items-start gap-[10px] w-full h-[18px]">
                  <Checkbox
                    id="privacy-policy"
                    checked={acceptedTerms}
                    onCheckedChange={(checked) =>
                      setAcceptedTerms(checked as boolean)
                    }
                    className="w-4 h-4 mt-px rounded border border-solid border-[#a1a6b9]"
                  />
                  <Label
                    htmlFor="privacy-policy"
                    className="flex-1 [font-family:'SF_Pro_Display-Medium',Helvetica] text-[#526176] leading-[normal] font-medium text-[15px] tracking-[0] cursor-pointer"
                  >
                    <span className="[font-family:'SF_Pro_Display-Medium',Helvetica] font-medium text-[#526176] text-[15px] tracking-[0]">
                      Я принимаю условия{" "}
                    </span>
                    <a
                      href="https://docs.google.com/document/d/1fo_T40LV_p1axxp1DCMYVrd-vbzQFvFmpmv-IPv-zos/edit?usp=sharing"
                      rel="noopener noreferrer"
                      target="_blank"
                      className="underline text-[#526176] hover:text-[#164dff] transition-colors"
                    >
                      Политики обработки персональных данных
                    </a>
                  </Label>
                </div>
              </div>

              {/* Submit button and login link */}
              <div className="translate-y-[-1rem] animate-fade-in opacity-0 [--animation-delay:800ms]">
                <div className="flex flex-col items-start justify-center gap-[30px] w-full">
                  <Button
                    disabled={!acceptedTerms}
                    className="flex h-12 items-center justify-center gap-2 px-[147px] py-[13px] w-full bg-[#d6e1ec] rounded-[1000px] [font-family:'Roboto',Helvetica] font-semibold text-[#7b94b1] text-base tracking-[0] leading-5 whitespace-nowrap hover:bg-[#c5d4e1] transition-colors disabled:opacity-50 disabled:cursor-not-allowed h-auto"
                  >
                    Далее
                  </Button>

                  <div className="relative w-[268px] h-[25px]">
                    <div className="[font-family:'Roboto',Helvetica] font-medium text-[15px] tracking-[0] leading-[19.5px] whitespace-nowrap">
                      <span className="text-[#526176]">Уже есть аккаунт? </span>
                      <button className="text-[#164dff] hover:underline transition-colors">
                        Войти
                      </button>
                    </div>
                    <img
                      className="absolute w-[50px] h-1 top-[21px] left-[132px]"
                      alt="Element"
                      src="https://c.animaapp.com/meqn3clj7n5fcU/img/element-34.svg"
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Right side - Screenshot container */}
      <div className="translate-y-[-1rem] animate-fade-in opacity-0 [--animation-delay:1000ms]">
        <div className="w-[1082px] h-[1040px] mt-5 mr-5 bg-black rounded-[32px] overflow-hidden">
          <img
            className="w-[915px] h-[774px] mt-[133px] ml-[83px]"
            alt="Screenshot"
            src="https://c.animaapp.com/meqn3clj7n5fcU/img/screenshot-2024-08-29-at-21-43-38-1.png"
          />
        </div>
      </div>
    </div>
  );
};


button.tsx
import { Slot } from "@radix-ui/react-slot";
import { type VariantProps, cva } from "class-variance-authority";
import * as React from "react";
import { cn } from "../../lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  },
);
Button.displayName = "Button";

export { Button, buttonVariants };


checkbox.tsx
import * as CheckboxPrimitive from "@radix-ui/react-checkbox";
import { CheckIcon } from "lucide-react";
import * as React from "react";
import { cn } from "../../lib/utils";

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className,
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <CheckIcon className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
));
Checkbox.displayName = CheckboxPrimitive.Root.displayName;

export { Checkbox };


input.tsx
import * as React from "react";
import { cn } from "../../lib/utils";

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className,
        )}
        ref={ref}
        {...props}
      />
    );
  },
);
Input.displayName = "Input";

export { Input };


lable.tsx
import * as LabelPrimitive from "@radix-ui/react-label";
import { type VariantProps, cva } from "class-variance-authority";
import * as React from "react";
import { cn } from "../../lib/utils";

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
);

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };


toggle-group.tsx
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group";
import { type VariantProps } from "class-variance-authority";
import * as React from "react";
import { cn } from "../../lib/utils";
import { toggleVariants } from "./toggle";

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
});

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
));

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName;

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext);

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className,
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  );
});

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName;

export { ToggleGroup, ToggleGroupItem };


toggle.tsx
"use client";

import * as TogglePrimitive from "@radix-ui/react-toggle";
import { type VariantProps, cva } from "class-variance-authority";
import * as React from "react";
import { cn } from "../../lib/utils";

const toggleVariants = cva(
  "inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-9 px-2 min-w-9",
        sm: "h-8 px-1.5 min-w-8",
        lg: "h-10 px-2.5 min-w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
));

Toggle.displayName = TogglePrimitive.Root.displayName;

export { Toggle, toggleVariants };



Необходимо реализовать интерфейс как в исходных файлах:
Create src/components/ui/button.tsx
Create src/components/ui/checkbox.tsx
Create src/components/ui/input.tsx
Create src/components/ui/label.tsx
Create src/components/ui/toggle-group.tsx
Create src/components/ui/toggle.tsx

эти файлы разместить в проекте глобально, поскольку будут переиспользоваться.

Вот мой текущий файл, который нужно обновить
src\pages\Auth\Register.tsx
const Register = () => {
  return (
    <div style={{ padding: 40, textAlign: "center" }}>
      <h2>Регистрация будет реализована позже</h2>
    </div>
  );
};

export default Register;


думаю есть необходимость создать src\pages\Auth\Register.model.css

прилааю исходный файл со стилями
tailwind.css
@tailwind components;
@tailwind utilities;

@layer components {
  .all-\[unset\] {
    all: unset;
  }
}

:root {
  --profdepo-text-caption-1-medium-font-family: "Roboto", Helvetica;
  --profdepo-text-caption-1-medium-font-size: 12px;
  --profdepo-text-caption-1-medium-font-style: normal;
  --profdepo-text-caption-1-medium-font-weight: 500;
  --profdepo-text-caption-1-medium-letter-spacing: 0px;
  --profdepo-text-caption-1-medium-line-height: 12px;
  --profdepo-text-text-9-medium-font-family: "Roboto", Helvetica;
  --profdepo-text-text-9-medium-font-size: 14px;
  --profdepo-text-text-9-medium-font-style: normal;
  --profdepo-text-text-9-medium-font-weight: 500;
  --profdepo-text-text-9-medium-letter-spacing: 0px;
  --profdepo-text-text-9-medium-line-height: 18px;
}

:root {
  --animate-spin: spin 1s linear infinite;
}

.animate-fade-in {
  animation: fade-in 1s var(--animation-delay, 0s) ease forwards;
}

.animate-fade-up {
  animation: fade-up 1s var(--animation-delay, 0s) ease forwards;
}

.animate-marquee {
  animation: marquee var(--duration) infinite linear;
}

.animate-marquee-vertical {
  animation: marquee-vertical var(--duration) linear infinite;
}

.animate-shimmer {
  animation: shimmer 8s infinite;
}

.animate-spin {
  animation: var(--animate-spin);
}

@keyframes spin {
  to {
    transform: rotate(1turn);
  }
}

@keyframes image-glow {
  0% {
    opacity: 0;
    animation-timing-function: cubic-bezier(0.74, 0.25, 0.76, 1);
  }

  10% {
    opacity: 0.7;
    animation-timing-function: cubic-bezier(0.12, 0.01, 0.08, 0.99);
  }

  to {
    opacity: 0.4;
  }
}

@keyframes fade-in {
  0% {
    opacity: 0;
    transform: translateY(-10px);
  }

  to {
    opacity: 1;
    transform: none;
  }
}

@keyframes fade-up {
  0% {
    opacity: 0;
    transform: translateY(20px);
  }

  to {
    opacity: 1;
    transform: none;
  }
}

@keyframes shimmer {
  0%,
  90%,
  to {
    background-position: calc(-100% - var(--shimmer-width)) 0;
  }

  30%,
  60% {
    background-position: calc(100% + var(--shimmer-width)) 0;
  }
}

@keyframes marquee {
  0% {
    transform: translate(0);
  }

  to {
    transform: translateX(calc(-100% - var(--gap)));
  }
}

@keyframes marquee-vertical {
  0% {
    transform: translateY(0);
  }

  to {
    transform: translateY(calc(-100% - var(--gap)));
  }
}

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 47.4% 11.2%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;

    --card: transparent;
    --card-foreground: 222.2 47.4% 11.2%;

    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 100% 50%;
    --destructive-foreground: 210 40% 98%;

    --ring: 215 20.2% 65.1%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 224 71% 4%;
    --foreground: 213 31% 91%;

    --muted: 223 47% 11%;
    --muted-foreground: 215.4 16.3% 56.9%;

    --accent: 216 34% 17%;
    --accent-foreground: 210 40% 98%;

    --popover: 224 71% 4%;
    --popover-foreground: 215 20.2% 65.1%;

    --border: 216 34% 17%;
    --input: 216 34% 17%;

    --card: transparent;
    --card-foreground: 213 31% 91%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 1.2%;

    --secondary: 222.2 47.4% 11.2%;
    --secondary-foreground: 210 40% 98%;

    --destructive: 0 63% 31%;
    --destructive-foreground: 210 40% 98%;

    --ring: 216 34% 17%;

    --radius: 0.5rem;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1;
  }
}

Следующей задачей будет аналогично для страницы Логина, некоторые из исходников будут переисползоваться,
может для размещения новых файлов, тебе показать структуру папок в проекте?
*********************************************************************************************************************************
Есть новая задача, необходимо сменить интерфейс на странице логина.
Вот исходники:
Element.tsx
import { ArrowLeftIcon, EyeIcon } from "lucide-react";
import React from "react";
import { Button } from "../../components/ui/button";
import { Card, CardContent } from "../../components/ui/card";
import { Input } from "../../components/ui/input";
import { Label } from "../../components/ui/label";

export const Element = (): JSX.Element => {
  return (
    <div
      className="relative w-full min-h-screen bg-white flex"
      data-model-id="1189:32089"
    >
      {/* Left side - Login form */}
      <div className="flex-1 flex flex-col">
        {/* Back button */}
        <div className="translate-y-[-1rem] animate-fade-in opacity-0 [--animation-delay:0ms]">
          <Button
            variant="ghost"
            size="sm"
            className="inline-flex items-center justify-center gap-2.5 p-2 absolute top-[60px] left-[60px] rounded-[13px] h-auto"
          >
            <ArrowLeftIcon className="w-6 h-6" />
          </Button>
        </div>

        {/* Main content */}
        <main className="flex flex-col w-[587px] items-start gap-10 absolute top-[330px] left-[60px]">
          {/* Logo and brand */}
          <div className="translate-y-[-1rem] animate-fade-in opacity-0 [--animation-delay:200ms]">
            <div className="inline-flex items-center gap-2.5 relative flex-[0_0_auto]">
              <div className="relative w-[22px] h-[22px] bg-[url(https://c.animaapp.com/meqmkbsnJDJjnz/img/subtract.svg)] bg-[100%_100%]" />
              <div className="relative w-fit mt-[-0.40px] [font-family:'Roboto',Helvetica] font-normal text-[#1e1e1e] text-[22px] tracking-[0] leading-[22px] whitespace-nowrap">
                Profdepo
              </div>
            </div>
          </div>

          {/* Login form */}
          <div className="translate-y-[-1rem] animate-fade-in opacity-0 [--animation-delay:400ms]">
            <div className="flex flex-col items-start gap-5 relative self-stretch w-full flex-[0_0_auto]">
              <div className="flex flex-col items-start justify-center gap-6 relative self-stretch w-full flex-[0_0_auto]">
                <h1 className="relative w-fit mt-[-1.00px] [font-family:'Roboto',Helvetica] font-semibold text-[#1e1e1e] text-4xl text-center tracking-[0] leading-[normal] whitespace-nowrap">
                  Вход
                </h1>

                <div className="flex flex-col items-start gap-[18px] relative self-stretch w-full flex-[0_0_auto]">
                  {/* Email/Phone field */}
                  <div className="flex flex-col items-start gap-2 relative self-stretch w-full flex-[0_0_auto]">
                    <Label className="relative self-stretch mt-[-1.00px] font-profdepo-text-caption-1-medium font-[number:var(--profdepo-text-caption-1-medium-font-weight)] text-[#526176] text-[length:var(--profdepo-text-caption-1-medium-font-size)] tracking-[var(--profdepo-text-caption-1-medium-letter-spacing)] leading-[var(--profdepo-text-caption-1-medium-line-height)] [font-style:var(--profdepo-text-caption-1-medium-font-style)]">
                      Почта или телефон
                    </Label>
                    <Input
                      placeholder="Введите почту или телефон"
                      className="flex items-center gap-2 pl-3 pr-8 py-3.5 relative self-stretch w-full flex-[0_0_auto] rounded-[18px] border border-solid border-[#97aec6] font-profdepo-text-text-9-medium font-[number:var(--profdepo-text-text-9-medium-font-weight)] text-[#97aec6] text-[length:var(--profdepo-text-text-9-medium-font-size)] tracking-[var(--profdepo-text-text-9-medium-letter-spacing)] leading-[var(--profdepo-text-text-9-medium-line-height)] [font-style:var(--profdepo-text-text-9-medium-font-style)] h-auto"
                    />
                  </div>

                  {/* Password field */}
                  <div className="flex flex-col items-start gap-3 relative self-stretch w-full flex-[0_0_auto]">
                    <div className="flex flex-col items-start justify-center gap-2 relative self-stretch w-full flex-[0_0_auto]">
                      <Label className="w-fit mt-[-1.00px] whitespace-nowrap relative font-profdepo-text-caption-1-medium font-[number:var(--profdepo-text-caption-1-medium-font-weight)] text-[#526176] text-[length:var(--profdepo-text-caption-1-medium-font-size)] tracking-[var(--profdepo-text-caption-1-medium-letter-spacing)] leading-[var(--profdepo-text-caption-1-medium-line-height)] [font-style:var(--profdepo-text-caption-1-medium-font-style)]">
                        Пароль
                      </Label>
                      <div className="flex items-center justify-between px-3 py-[11px] relative self-stretch w-full flex-[0_0_auto] rounded-[18px] border border-solid border-[#97aec6]">
                        <Input
                          type="password"
                          placeholder="Введите пароль"
                          className="border-0 p-0 h-auto bg-transparent font-profdepo-text-text-9-medium font-[number:var(--profdepo-text-text-9-medium-font-weight)] text-[#97aec6] text-[length:var(--profdepo-text-text-9-medium-font-size)] tracking-[var(--profdepo-text-text-9-medium-letter-spacing)] leading-[var(--profdepo-text-text-9-medium-line-height)] [font-style:var(--profdepo-text-text-9-medium-font-style)] focus-visible:ring-0 focus-visible:ring-offset-0"
                        />
                        <EyeIcon className="w-5 h-5" />
                      </div>
                    </div>
                    <button className="self-stretch relative font-profdepo-ai-4-desktop-body-caption-small font-[number:var(--profdepo-ai-4-desktop-body-caption-small-font-weight)] text-[#526176] text-[length:var(--profdepo-ai-4-desktop-body-caption-small-font-size)] tracking-[var(--profdepo-ai-4-desktop-body-caption-small-letter-spacing)] leading-[var(--profdepo-ai-4-desktop-body-caption-small-line-height)] [font-style:var(--profdepo-ai-4-desktop-body-caption-small-font-style)] text-left">
                      Забыли пароль?
                    </button>
                  </div>
                </div>
              </div>

              {/* Login button and register link */}
              <div className="translate-y-[-1rem] animate-fade-in opacity-0 [--animation-delay:600ms]">
                <div className="flex flex-col items-start justify-center gap-7 relative self-stretch w-full flex-[0_0_auto]">
                  <Button
                    disabled
                    className="flex h-12 items-center justify-center gap-2 px-[147px] py-[13px] relative self-stretch w-full bg-[#d6e1ec] rounded-[1000px] [font-family:'Roboto',Helvetica] font-semibold text-[#7b94b1] text-base tracking-[0] leading-5 hover:bg-[#d6e1ec]"
                  >
                    Войти
                  </Button>

                  <div className="relative w-[268px] h-[25px]">
                    <div className="absolute -top-px left-0 [font-family:'Roboto',Helvetica] font-normal text-transparent text-[15px] tracking-[0] leading-[19.5px] whitespace-nowrap">
                      <span className="font-medium text-[#526176]">
                        Впервые здесь?{" "}
                      </span>
                      <button className="font-semibold text-[#164dff]">
                        Зарегистрироваться
                      </button>
                    </div>
                    <img
                      className="absolute w-[149px] h-1 top-[21px] left-[119px]"
                      alt="Element"
                      src="https://c.animaapp.com/meqmkbsnJDJjnz/img/element-34.svg"
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>
        </main>
      </div>

      {/* Right side - 3D design showcase */}
      <div className="translate-y-[-1rem] animate-fade-in opacity-0 [--animation-delay:800ms]">
        <Card className="w-[1082px] h-[1040px] mt-5 mr-5 bg-black rounded-[32px] overflow-hidden border-0">
          <CardContent className="p-0 h-full">
            <img
              className="w-[915px] h-[774px] mt-[133px] ml-[83px]"
              alt="Screenshot"
              src="https://c.animaapp.com/meqmkbsnJDJjnz/img/screenshot-2024-08-29-at-21-43-38-1.png"
            />
          </CardContent>
        </Card>
      </div>
    </div>
  );
};


button.tsx
import { Slot } from "@radix-ui/react-slot";
import { type VariantProps, cva } from "class-variance-authority";
import * as React from "react";
import { cn } from "../../lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  },
);
Button.displayName = "Button";

export { Button, buttonVariants };


card.tsx
import * as React from "react";
import { cn } from "../../lib/utils";

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className,
    )}
    {...props}
  />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
));
CardFooter.displayName = "CardFooter";

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};


input.tsx
import * as React from "react";
import { cn } from "../../lib/utils";

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className,
        )}
        ref={ref}
        {...props}
      />
    );
  },
);
Input.displayName = "Input";

export { Input };


lable.tsx
import * as LabelPrimitive from "@radix-ui/react-label";
import { type VariantProps, cva } from "class-variance-authority";
import * as React from "react";
import { cn } from "../../lib/utils";

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
);

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };


файл со стилями
@tailwind components;
@tailwind utilities;

@layer components {
  .all-\[unset\] {
    all: unset;
  }
}

:root {
  --profdepo-ai-4-desktop-body-caption-small-font-family: "Roboto", Helvetica;
  --profdepo-ai-4-desktop-body-caption-small-font-size: 12px;
  --profdepo-ai-4-desktop-body-caption-small-font-style: normal;
  --profdepo-ai-4-desktop-body-caption-small-font-weight: 500;
  --profdepo-ai-4-desktop-body-caption-small-letter-spacing: 0px;
  --profdepo-ai-4-desktop-body-caption-small-line-height: 100%;
  --profdepo-text-caption-1-medium-font-family: "Roboto", Helvetica;
  --profdepo-text-caption-1-medium-font-size: 12px;
  --profdepo-text-caption-1-medium-font-style: normal;
  --profdepo-text-caption-1-medium-font-weight: 500;
  --profdepo-text-caption-1-medium-letter-spacing: 0px;
  --profdepo-text-caption-1-medium-line-height: 12px;
  --profdepo-text-text-9-medium-font-family: "Roboto", Helvetica;
  --profdepo-text-text-9-medium-font-size: 14px;
  --profdepo-text-text-9-medium-font-style: normal;
  --profdepo-text-text-9-medium-font-weight: 500;
  --profdepo-text-text-9-medium-letter-spacing: 0px;
  --profdepo-text-text-9-medium-line-height: 18px;
}

:root {
  --animate-spin: spin 1s linear infinite;
}

.animate-fade-in {
  animation: fade-in 1s var(--animation-delay, 0s) ease forwards;
}

.animate-fade-up {
  animation: fade-up 1s var(--animation-delay, 0s) ease forwards;
}

.animate-marquee {
  animation: marquee var(--duration) infinite linear;
}

.animate-marquee-vertical {
  animation: marquee-vertical var(--duration) linear infinite;
}

.animate-shimmer {
  animation: shimmer 8s infinite;
}

.animate-spin {
  animation: var(--animate-spin);
}

@keyframes spin {
  to {
    transform: rotate(1turn);
  }
}

@keyframes image-glow {
  0% {
    opacity: 0;
    animation-timing-function: cubic-bezier(0.74, 0.25, 0.76, 1);
  }

  10% {
    opacity: 0.7;
    animation-timing-function: cubic-bezier(0.12, 0.01, 0.08, 0.99);
  }

  to {
    opacity: 0.4;
  }
}

@keyframes fade-in {
  0% {
    opacity: 0;
    transform: translateY(-10px);
  }

  to {
    opacity: 1;
    transform: none;
  }
}

@keyframes fade-up {
  0% {
    opacity: 0;
    transform: translateY(20px);
  }

  to {
    opacity: 1;
    transform: none;
  }
}

@keyframes shimmer {
  0%,
  90%,
  to {
    background-position: calc(-100% - var(--shimmer-width)) 0;
  }

  30%,
  60% {
    background-position: calc(100% + var(--shimmer-width)) 0;
  }
}

@keyframes marquee {
  0% {
    transform: translate(0);
  }

  to {
    transform: translateX(calc(-100% - var(--gap)));
  }
}

@keyframes marquee-vertical {
  0% {
    transform: translateY(0);
  }

  to {
    transform: translateY(calc(-100% - var(--gap)));
  }
}

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 47.4% 11.2%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;

    --card: transparent;
    --card-foreground: 222.2 47.4% 11.2%;

    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 100% 50%;
    --destructive-foreground: 210 40% 98%;

    --ring: 215 20.2% 65.1%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 224 71% 4%;
    --foreground: 213 31% 91%;

    --muted: 223 47% 11%;
    --muted-foreground: 215.4 16.3% 56.9%;

    --accent: 216 34% 17%;
    --accent-foreground: 210 40% 98%;

    --popover: 224 71% 4%;
    --popover-foreground: 215 20.2% 65.1%;

    --border: 216 34% 17%;
    --input: 216 34% 17%;

    --card: transparent;
    --card-foreground: 213 31% 91%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 1.2%;

    --secondary: 222.2 47.4% 11.2%;
    --secondary-foreground: 210 40% 98%;

    --destructive: 0 63% 31%;
    --destructive-foreground: 210 40% 98%;

    --ring: 216 34% 17%;

    --radius: 0.5rem;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1;
  }
}


Необходимо реализовать интерфейс как в исходных файлах:
Create src/components/ui/button.tsx
Create src/components/ui/checkbox.tsx
Create src/components/ui/input.tsx
Create src/components/ui/label.tsx
Create src/components/ui/toggle-group.tsx
Create src/components/ui/toggle.tsx

эти файлы разместить в проекте глобально, поскольку будут переиспользоваться.

Вот мой текущий файл, который нужно обновить
src\pages\Auth\Login.tsx
import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate, Link } from "react-router-dom";
import { login } from "@/features/auth/model/authSlice";
import type { RootState } from "@/app/store";

const Login = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const isAuthenticated = useSelector((s: RootState) => s.auth.isAuthenticated);
  const dispatch = useDispatch();
  const navigate = useNavigate();

  useEffect(() => {
    if (isAuthenticated) navigate("/lk", { replace: true });
  }, [isAuthenticated, navigate]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    dispatch(login({ email, password }));
  };

  return (
    <div style={{ padding: 40, maxWidth: 360, margin: "0 auto" }}>
      <h2 style={{ textAlign: "center", marginBottom: 16 }}>ВХОД</h2>
      <form onSubmit={handleSubmit} style={{ display: "flex", flexDirection: "column", gap: 12 }}>
        <input
          type="email"
          placeholder="Введите e-mail"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
        />
        <input
          type="password"
          placeholder="Введите пароль"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
        <button type="submit">Войти</button>
      </form>
      <div style={{ marginTop: 12, textAlign: "center" }}>
        Нет аккаунта? <Link to="/register">Зарегистрироваться</Link>
      </div>
    </div>
  );
};

export default Login;

необходимо создать src\pages\Auth\Login.model.css
